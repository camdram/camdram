<?php

namespace Acts\CamdramBundle\Entity;

use Doctring\ORM\Mapping as ORM;
use Doctrine\ORM\EntityRepository;

use Doctrine\ORM\Query\Expr;

/**
 * TechieAdvertRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class TechieAdvertRepository extends EntityRepository
{    
    /**
     * findCurrentOrderedByDateName
     *
     * Find all auditions between two dates that should be shown on the
     * diary page, joined to the corresponding show.
     *
     * @param integer $startDate start date expressed as a Unix timestamp
     * @param integer $endDate emd date expressed as a Unix timestamp
     *
     * @return array of auditions
     */
    public function findCurrentOrderedByDateName()
    {
        $query_res = $this->getEntityManager()->getRepository('ActsCamdramBundle:TechieAdvert');
        $query = $query_res->createQueryBuilder('a')
            ->leftJoin('ActsCamdramBundle:Show', 's', Expr\Join::WITH, 'a.show = s.id')
            ->where('a.expiry >= CURRENT_DATE()')
            ->andWhere('s.authorised_by is not null')
            ->andWhere('s.entered = 1')
            ->orderBy('s.name, a.expiry, s.society')
            ->getQuery();
        /* AJF58 - need to sort this by minimum startdate and enddate of performances */
        return $query->getResult();
    }

    private function getLatestQuery($limit) {
        return $this->createQueryBuilder('a')
            ->leftJoin('a.show', 's')
            ->where('a.expiry >= CURRENT_DATE()')
            ->andWhere('s.authorised_by is not null')
            ->andWhere('s.entered = 1')
            ->orderBy('a.last_updated')
            ->setMaxResults($limit);
    }

    public function findLatest($limit)
    {
        return $this->getLatestQuery($limit)->getQuery()->getResult();
    }

    public function findLatestBySociety(Society $society, $limit)
    {
        return $this->getLatestQuery($limit)
            ->leftJoin('s.society', 'y')->andWhere('y = :society')->setParameter('society', $society)
            ->getQuery()->getResult();
    }

    public function findLatestByVenue(Venue $venue, $limit)
    {
        return $this->getLatestQuery($limit)
            ->leftJoin('s.venue', 'v')->andWhere('v = :venue')->setParameter('venue', $venue)
            ->getQuery()->getResult();
    }

}

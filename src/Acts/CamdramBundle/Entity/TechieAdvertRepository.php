<?php

namespace Acts\CamdramBundle\Entity;

use Doctring\ORM\Mapping as ORM;
use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Query\Expr;

/**
 * TechieAdvertRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class TechieAdvertRepository extends EntityRepository
{
    public function findNotExpiredOrderedByDateName(\DateTime $date)
    {
        $query_res = $this->getEntityManager()->getRepository('ActsCamdramBundle:TechieAdvert');
        $qb = $query_res->createQueryBuilder('a');
        $query = $qb->leftJoin('a.show', 's')
            ->where('a.expiry > :expiry')
            ->andWhere('s.authorised = true')
            ->orderBy('a.expiry, s.name')
            ->setParameter('expiry', $date)
            ->getQuery();

        return $query->getResult();
    }

    private function getLatestQuery($limit, \DateTime $now)
    {
        $qb = $this->createQueryBuilder('a');

        return $qb->leftJoin('a.show', 's')
            ->where('a.expiry > :expiry')
            ->andWhere('s.authorised = true')
            ->orderBy('a.last_updated')
            ->setParameter('expiry', $now)
            ->setMaxResults($limit);
    }

    public function findLatest($limit, \DateTime $now)
    {
        return $this->getLatestQuery($limit, $now)->getQuery()->getResult();
    }

    public function findLatestBySociety(Society $society, $limit, \DateTime $now)
    {
        return $this->getLatestQuery($limit, $now)
            ->andWhere(':society MEMBER OF s.societies')->setParameter('society', $society)
            ->getQuery()->getResult();
    }

    public function findLatestByVenue(Venue $venue, $limit, \DateTime $now)
    {
        return $this->getLatestQuery($limit, $now)
            ->andWhere('EXISTS (SELECT p FROM \Acts\CamdramBundle\Entity\Performance p WHERE p.show = s AND p.venue = :venue)')
            ->setParameter('venue', $venue)
            ->getQuery()->getResult();
    }

    public function findOneByShowSlug($slug, \DateTime $now)
    {
        $qb = $this->createQueryBuilder('a');

        return $qb->leftJoin('a.show', 's')
            ->where('a.expiry > :expiry')
            ->andWhere('s.slug = :slug')
            ->andWhere('s.authorised = true')
            ->setParameter('slug', $slug)
            ->setParameter('expiry', $now)
            ->getQuery()->getOneOrNullResult();
    }
}

<?php

namespace Acts\CamdramBundle\Entity;

use Doctrine\ORM\EntityRepository;

use Doctrine\ORM\Query\Expr;

/**
 * ApplicationRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ApplicationRepository extends EntityRepository
{
    /**
     * findScheduledOrderedByDeadline
     *
     * Find all applications between two dates that should be shown on the
     * diary page.
     *
     * @param DateTime $startDate start date 
     * @param DateTime $endDate end date
     *
     * @return array of applications
     */
    public function findScheduledOrderedByDeadline($startDate, $endDate)
    {
        $query_res = $this->getEntityManager()->getRepository('ActsCamdramBundle:Application');
        $query = $query_res->createQueryBuilder('a') 
            ->leftJoin('a.show', 's')
            ->addSelect('s')
            ->where('a.deadlineDate <= :enddate')
            ->andWhere('a.deadlineDate >= :startdate')            
            ->andWhere('s.id IS NULL OR (s.authorised_by IS NOT NULL and s.entered != false)') // s.id is null means it's a society - no authorisation needed
            ->setParameters(array(
                'startdate' => $startDate,
                'enddate' =>  $endDate
                ))
            ->orderBy('a.deadlineDate')
            ->addOrderBy('a.deadlineTime')
            ->getQuery();

        return $query->getResult();
    }

    private function getLatestQuery($limit, \DateTime $now)
    {
        $qb = $this->createQueryBuilder('a');
        $qb->leftJoin('a.show', 's')
            ->where($qb->expr()->orX('a.deadlineDate > :current_date',
                $qb->expr()->andX('a.deadlineDate = :current_date', 'a.deadlineTime >= :current_time')))
            ->andWhere($qb->expr()->orX(
                'a.show IS NULL',
                $qb->expr()->andX('s.authorised_by is not null', 's.entered != false')
            ))
            ->orderBy('a.deadlineDate','DESC')
            ->addOrderBy('a.deadlineTime','DESC')
            ->setParameter('current_date', $now, \Doctrine\DBAL\Types\Type::DATE)
            ->setParameter('current_time', $now, \Doctrine\DBAL\Types\Type::TIME);


        if ($limit > 0) $qb->setMaxResults($limit);

        return $qb;
    }

    public function findLatest($limit, \DateTime $now)
    {
        return $this->getLatestQuery($limit, $now)->getQuery()->getResult();
    }

    public function findLatestBySociety(Society $society, $limit, \DateTime $now)
    {
        $qb = $this->getLatestQuery($limit, $now);
        $qb->andWhere(
                    $qb->expr()->orX('s.society = :society', 'a.society = :society')
            )->setParameter('society', $society);
        return $qb->getQuery()->getResult();
    }

    public function findLatestByVenue(Venue $venue, $limit, \DateTime $now)
    {
        $qb = $this->getLatestQuery($limit, $now);
        return $qb->leftJoin('s.venue', 'v')->andWhere('v = :venue')->setParameter('venue', $venue)
            ->getQuery()->getResult();
    }
}

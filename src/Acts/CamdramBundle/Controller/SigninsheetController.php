<?php

namespace Acts\CamdramBundle\Controller;

use Symfony\Bundle\FrameworkBundle\Controller\Controller;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use Acts\CamdramBundle\Entity\Show;

/**
 * Class SigninsheetController
 *
 * Very basic controller used for generating sign in sheets. Currently the two
 * forms supported are a basic HTML table and a CSV format for downloading.
 */
class SigninsheetController extends Controller
{
    /*
     * @param null|string $slug
     * @return \Symfony\Component\HttpFoundation\Response
     */
    public function indexAction(Request $request, $slug = null, $_format)
    {
        $repo = $this->getDoctrine()->getManager()->getRepository('ActsCamdramBundle:Show');
        $show = $repo->findOneBySlug($slug);
        if (!$show) {
            throw $this->createNotFoundException('That show does not exist.');
        }
        $events = $show->getAllPerformances();
        if (!$events) {
            throw $this->createNotFoundException('There are no performances associated with this show.');
        }
        $last_perf = end($events);
        $last_perf = $last_perf['date'];
        $one_week_later = clone $events[0]['date'];
        $one_week_later->modify('+7 days');
        if ($one_week_later >= $last_perf) {
            $date_format = 'D';
        } else {
            $date_format = 'D j/n/y';
        }

        if ($_format == 'csv') {
            # Write to a temporary file (in-memory unless huge).
            $handle = fopen("php://temp", "w+");

            # First thing's first we write the UTF-8 byte order mark.
            $BOM = "\xEF\xBB\xBF";
            fwrite($handle, $BOM);

            # Now generate the actual CSV using PHP's built-in fputcsv.
            fputcsv($handle, [ "Sign-in sheet for {$show->getName()} (" .
                $events[0]['date']->format('j/n/Y') . "â€“" . end($events)['date']->format('j/n/Y') .
                " â€“ generated by Camdram"]);
            fputcsv($handle, []);

            $header_1 = ["", "Tech", "", "Dress", ""];
            $header_2 = ["", "In", "Out", "In", "Out"];
            foreach ($events as $event) {
                $header_1 = array_merge($header_1, [$event["date"]->format($date_format)." ".$event["time"]->format("H:i"), ""]);
                $header_2 = array_merge($header_2, ["In", "Out"]);
            }
            fputcsv($handle, $header_1);
            fputcsv($handle, $header_2);

            foreach([["cast", "Cast"], ["band", "Band"], ["prod", "Production Team"]] as $role_type) {
                $roles = $show->getRolesByType($role_type[0])
                              ->map(function($role) { return $role->getPerson()->getName(); })
                              ->toArray();
                $roles = array_unique($roles);
                sort($roles);
                if (empty($roles)) { continue; }

                fputcsv($handle, [$role_type[1]]);
                foreach ($roles as $role) {
                    fputcsv($handle, [$role]);
                }
                fputcsv($handle, []);
            }

            rewind($handle);
            $response = new Response(stream_get_contents($handle));
            fclose($handle);

            $response->headers->set('Content-Type', 'text/csv');
            $response->headers->set('Content-Disposition', 'inline; attachment; filename="signinsheet.csv"');
        } else {
            $response = $this->render('show/signinsheet.html.twig',
            array('show' => $show, 'events' => $events, 'date_format' => $date_format)
            );
        }

        return $response;
    }
}

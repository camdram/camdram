<?php
namespace Acts\CamdramSecurityBundle\EventListener;

use Acts\CamdramBundle\Entity\PendingAccess,
    Acts\CamdramSecurityBundle\Entity\User;
use Acts\CamdramSecurityBundle\Event\AccessControlEntryEvent,
    Acts\CamdramSecurityBundle\Event\PendingAccessEvent,
    Acts\CamdramSecurityBundle\Event\UserEvent;
use Acts\CamdramSecurityBundle\Service\EmailDispatcher;
use Acts\CamdramSecurityBundle\Service\TokenGenerator;
use Symfony\Component\Routing\RouterInterface;

/**
 * EmailSendListener
 *
 * Functions triggered by events generated by the Security Bundle. These functions
 * result in automated emails being sent by Camdram.
 *
 */
class EmailSendListener
{
    private $dispatcher;
    private $generator;

    public function __construct(EmailDispatcher $dispatcher, TokenGenerator $generator)
    {
        $this->dispatcher = $dispatcher;
        $this->generator = $generator;
    }

    public function onRegistrationEvent(UserEvent $event)
    {
        $user = $event->getUser();
        $token = $user->getIsEmailVerified() ? null : $this->generator->generateEmailConfirmationToken($user);

        $this->dispatcher->sendRegistrationEmail($user, $token);
    }

    public function onEmailChangeEvent(UserEvent $event)
    {
        $user = $event->getUser();
        $token = $this->generator->generateEmailConfirmationToken($user);

        $this->dispatcher->sendEmailVerifyEmail($user, $token);
    }

    /**
     * Inform the person that they have been granted access to a resource on the
     * site.
     */
    public function onAceCreatedEvent(AccessControlEntryEvent $event)
    {
        $ace = $event->getAccessControlEntry();
        switch ($ace->getType()) {
            case 'show':
            case 'society':
                $this->dispatcher->sendAceEmail($ace);
                break;
            case 'request-show':
                $this->dispatcher->sendShowAdminReqEmail($ace);
                break;
        }
    }

    /**
     * Inform the person that they have been granted access to a resource on the
     * site, pending creating an account.
     */
    public function onPendingAccessCreatedEvent(PendingAccessEvent $event)
    {
        $pending_ace = $event->getPendingAccess();
        $this->dispatcher->sendPendingAceEmail($pending_ace);
    }
}


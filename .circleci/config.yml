version: 2.1

commands:
    system_setup:
        description: System setup
        steps:
          - run:
              name: System setup
              command: |
                  echo "parameters:
                      search_enable_listeners: true" > app/config/parameters.yml
                  echo 'memory_limit=-1' | sudo tee -a /usr/local/etc/php/php.ini
                  sudo rm /usr/local/etc/php/conf.d/docker-php-ext-xdebug.ini

    install_deps:
        description: Install Dependencies
        steps:
          - restore_cache:
              keys:
                  - v1-dependencies-{{ checksum "composer.lock" }}
                  # fallback to using the latest cache if no exact match is found
                  - v1-dependencies-
          - run:
              name: Install Dependencies
              command: |
                  composer install -n --prefer-dist
          - save_cache:
              paths:
                - ./vendor
              key: v1-dependencies-{{ checksum "composer.lock" }}

jobs:
    run_tests:
        docker:
          - image: circleci/php:7.0
          - image: docker.elastic.co/elasticsearch/elasticsearch:5.6.13
            environment:
                xpack.security.enabled: false
                xpack.monitoring.enabled: false
                xpack.ml.enabled: false
                xpack.graph.enabled: false
                xpack.watcher.enabled: false

        environment:
            SYMFONY_DEPRECATIONS_HELPER: weak_vendors
            SYMFONY_ENV: test
            DATBASE_URL: sqlite:///%kernel.cache_dir%/test.db

        steps:
          - checkout
          - system_setup
          - install_deps

          - run: 
              name: Run Tests
              command: |
                  php app/console doctrine:schema:update --force
                  php app/console lint:yaml app/config
                  php app/console lint:twig app/Resources
                  php bin/simple-phpunit
                  php bin/behat
        
          - run: 
              name: Test fixtures and search index population
              command: |
                  php app/console camdram:database:refresh
                  php app/console fos:elastica:populate

    validate_migrations:
        docker:
          - image: circleci/php:7.0
          - image: circleci/mariadb:10
            environment:
                MYSQL_DATABASE: camdram_test
                MYSQL_ALLOW_EMPTY_PASSWORD: yes

        environment:
            SYMFONY_ENV: test
            DATABASE_URL: mysql://root@127.0.0.1/camdram_test

        steps:
          - run:
              name: Install php-mysql
              command: sudo docker-php-ext-install pdo_mysql

          - checkout
          - system_setup
          - install_deps
    
          - run:
              name: Test MySQL migrations
              command: php app/console doctrine:migrations:migrate --no-interaction

    deploy_production:
        docker:
          - image: circleci/php:7.0

        steps:
          - checkout
          - system_setup
          - install_deps
          - add_ssh_keys:
              fingerprints:
                - "a0:e7:3e:8e:9d:a3:e6:f5:9d:ce:4c:2f:76:5a:0a:a1"
          - deploy:
                name: Deploy to Antigone *.dev
                command: |
                    ssh-keyscan antigone.camdram.net >> $HOME/.ssh/known_hosts
                    php bin/dep deploy production --tag=$CIRCLE_TAG

    deploy_dev:
        docker:
          - image: circleci/php:7.0

        steps:
          - checkout
          - system_setup
          - install_deps
          - add_ssh_keys:
              fingerprints:
                - "a0:e7:3e:8e:9d:a3:e6:f5:9d:ce:4c:2f:76:5a:0a:a1"
          - deploy:
                name: Deploy to Antigone www
                command: |
                    ssh-keyscan antigone.camdram.net >> $HOME/.ssh/known_hosts
                    php bin/dep deploy development --branch=$CIRCLE_BRANCH --revision=$CIRCLE_SHA1

workflows:
    version: 2
    test_deploy:
        jobs:
          # Run tests in parallel
          - run_tests
          - validate_migrations
          # Deploy tagged builds to production
          - deploy_production:
              requires: [run_tests, validate_migrations]
              filters:
                tags:
                  only: /^v.*/
                branches: 
                  ignore: /.*/ #Ignore step for branch-only commits
          # Deploy all builds to a branch-specific dev checkout
          - deploy_dev:
              requires: [run_tests, validate_migrations]